# .github/workflows/deploy.yml
name: Deploy to AWS

on:
  push:
    branches:
      - main

permissions:
  id-token: write # Required for OIDC
  contents: read  # Required for actions/checkout and reading repo content

jobs:
  # Job 1: Deploy Terraform Backend (S3 bucket and DynamoDB table)
  backend_deploy:
    runs-on: ubuntu-latest
    outputs:
      # These outputs capture the actual names of the created S3 bucket and DynamoDB table
      s3_bucket_name: ${{ steps.get_bucket_name.outputs.name }}
      dynamodb_table_name: ${{ steps.get_table_name.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false # Important for custom commands

      - name: Configure AWS Credentials (for backend creation)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # This role needs permissions to create S3 buckets and DynamoDB tables
          # Make sure this role's trust policy allows GitHub Actions OIDC to assume it.
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRoleForDeployment
          role-session-name: BackendDeploymentSession
          aws-region: ap-south-1 # Explicitly set region for this job

      - name: Terraform Init (Backend Bootstrap)
        working-directory: ./backend-bootstrap # Run init in the backend-bootstrap directory
        run: terraform init

      - name: Terraform Apply (Backend Bootstrap)
        working-directory: ./backend-bootstrap # Run apply in the backend-bootstrap directory
        run: terraform apply -auto-approve

      # Retrieve the names of the created resources using terraform output
      # These outputs are defined in backend-bootstrap/backend.tf (generated by lambda.py)
      - name: Get S3 Bucket Name
        id: get_bucket_name # ID for referencing this step's outputs
        working-directory: ./backend-bootstrap
        run: echo "name=$(terraform output -raw terraform_state_bucket_name)" >> "$GITHUB_OUTPUT" # Correct way to set step output
      - name: Get DynamoDB Table Name
        id: get_table_name # ID for referencing this step's outputs
        working-directory: ./backend-bootstrap
        run: echo "name=$(terraform output -raw terraform_lock_table_name)" >> "$GITHUB_OUTPUT" # Correct way to set step output

  # Job 2: Deploy Main Infrastructure (VPC, Lambda, ALB)
  main_infra_deploy:
    runs-on: ubuntu-latest
    needs: [backend_deploy] # This job depends on the successful completion of backend_deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          # No 'cache' line needed here, it will default to no caching if no lock file is found

      - name: Install Node.js dependencies
        working-directory: ./src
        run: npm install

      - name: Package Lambda function
        working-directory: ./src
        run: |
          # Create lambda.zip in the root directory (one level up from src)
          # We no longer calculate SOURCE_CODE_HASH here; Terraform will do it from the zip file.
          zip -r ../lambda.zip .
          cd ../ # Move to the root directory where lambda.zip is located
          SOURCE_CODE_HASH=$(sha256sum lambda.zip | awk '{print $1}')
          echo "SOURCE_CODE_HASH=${SOURCE_CODE_HASH}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Configure AWS Credentials (for main infra deployment)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # This role needs permissions for VPC, Lambda, ALB, S3 (for lambda code)
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRoleForDeployment
          role-session-name: MainInfraDeploymentSession
          aws-region: ap-south-1

      - name: Terraform Init (Main Infrastructure)
        working-directory: ./ # Main Terraform files (main.tf, variables.tf) are in the root
        run: |
          # Initialize Terraform with the backend created by the previous job
          terraform init \
            -backend-config="bucket=${{ needs.backend_deploy.outputs.s3_bucket_name }}" \
            -backend-config="key=main-infra.tfstate" \
            -backend-config="region=ap-south-1" \
            -backend-config="dynamodb_table=${{ needs.backend_deploy.outputs.dynamodb_table_name }}"

      - name: Terraform Plan (Main Infrastructure)
        working-directory: ./ # Run plan in the root directory
        # No -var="source_code_hash=..." or -var="lambda_zip_path=..." needed here
        # Terraform's aws_lambda_function resource will use filebase64sha256("lambda.zip")
        run: terraform plan

      - name: Terraform Apply (Main Infrastructure)
        working-directory: ./ # Run apply in the root directory

        # No -var="source_code_hash=..." or -var="lambda_zip_path=..." needed here
        run: terraform apply -auto-approve