name: Deploy Node.js Lambda to AWS

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  TF_BUCKET: my-unique-tfstate-bucket
  TF_DDB_TABLE: my-tfstate-lock
  TF_DIR: terraform
  ZIP_OUTPUT: dist/lambda.zip

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        #cache: 'npm'
        #cache-dependency-path: ./src/package-lock.json

    - name: Install dependencies
      run: |
        cd src
        npm ci

    - name: Package Lambda function
      run: |
        mkdir -p dist
        cd src
        zip -r ../${{ env.ZIP_OUTPUT }} index.js node_modules

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure S3 bucket and DynamoDB table exist
      run: |
        if [[ "${AWS_REGION}" == "us-east-1" ]]; then
          aws s3api create-bucket --bucket $TF_BUCKET || echo "Bucket exists"
        else
          aws s3api create-bucket --bucket $TF_BUCKET --region $AWS_REGION --create-bucket-configuration LocationConstraint=$AWS_REGION || echo "Bucket exists"
        fi
        aws s3api put-bucket-versioning --bucket $TF_BUCKET --versioning-configuration Status=Enabled || true
        aws dynamodb create-table \
          --table-name $TF_DDB_TABLE \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST || echo "DynamoDB table exists"

    - name: Initialize Terraform
      working-directory: ${{ env.TF_DIR }}
      run: terraform init

    - name: Terraform Plan
      working-directory: ${{ env.TF_DIR }}
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: ${{ env.TF_DIR }}
      run: terraform apply -auto-approve tfplan

    - name: Output ALB DNS
      working-directory: ${{ env.TF_DIR }}
      run: terraform output -raw alb_dns_name || echo "No ALB output found"
