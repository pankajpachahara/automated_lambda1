name: Deploy to AWS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install dependencies
        working-directory: ./src
        run: npm install

      - name: Package Lambda function
        working-directory: ./src
        run: |
          zip -r lambda.zip .
          echo "::set-output name=sha::$(shasum -a 256 lambda.zip | cut -d' ' -f1)"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRoleForDeployment
          role-session-name: GitHubActionsSession
          aws-region: ap-south-1

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -backend-config="region=ap-south-1" -backend-config="dynamodb_table=terraform-state-lock"

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var="lambda_zip_path=../src/lambda.zip" -var="source_code_hash=${{ steps.package.outputs.sha }}"

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -var="lambda_zip_path=../src/lambda.zip" -var="source_code_hash=${{ steps.package.outputs.sha }}"
# Alternatively, upload the zip file directly to S3 within the workflow if your Terraform config doesn't handle it.
#      - name: Upload to S3
#        working-directory: ./src
#        run: |
#          aws s3 cp lambda.zip s3://${{ terraform.outputs.lambda_bucket_name }}/lambda.zip