name: Deploy to AWS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install dependencies
        working-directory: ./src
        run: npm install

      - name: Package Lambda function
        working-directory: ./src
        run: |
          SOURCE_CODE_HASH=$(sha256sum index.js package-lock.json | awk '{print $1}')
          echo "SOURCE_CODE_HASH=${SOURCE_CODE_HASH}" >> $GITHUB_ENV
          zip -r ../lambda.zip .

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRoleForDeployment
          role-session-name: GitHubActionsDeploymentSession

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="key=terraform.tfstate" -backend-config="region=ap-south-1" -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var="source_code_hash=${{ env.SOURCE_CODE_HASH }}" -var="lambda_zip_path=../lambda.zip"

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -var="source_code_hash=${{ env.SOURCE_CODE_HASH }}" -var="lambda_zip_path=../lambda.zip"

      # Alternative approach using aws s3 cp if not using Terraform to manage the zip upload:
      # - name: Upload Lambda Zip to S3
      #   working-directory: ./
      #   run: aws s3 cp lambda.zip s3://${{ secrets.LAMBDA_BUCKET_NAME }}/lambda.zip